/* -*- coding: utf-8 -*- */
/* ------------------------------------------------------------------------------
 * glumpy - Fast OpenGL numpy visualization
 * Copyright (c) 2009 - Nicolas P. Rougier
 *
 * This file is part of glumpy.
 *
 * glumpy is free  software: you can redistribute it and/or  modify it under the
 * terms of  the GNU General  Public License as  published by the  Free Software
 * Foundation, either  version 3 of the  License, or (at your  option) any later
 * version.
 *
 * glumpy is  distributed in the  hope that it  will be useful, but  WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy  of the GNU General Public License along with
 * glumpy. If not, see <http://www.gnu.org/licenses/>.
 *
 * -----------------------------------------------------------------------------
 */
/*
 * Bicubic interpolation fragment shader
 * -------------------------------------
 *
 * From GPU Gems
 * Chapter 24. High-Quality Filtering
 * Kevin Bjorke, NVIDIA
 * http://http.developer.nvidia.com/GPUGems/gpugems_ch24.html
 *
 * Note: This shader require a kernel stored as a 1d texture
 * ----
 *
 * Kernel generation C code:
 * -------------------------
 *
 * // Mitchell Netravali Reconstruction Filter
 * // B = 1,   C = 0   - cubic B-spline
 * // B = 1/3, C = 1/3 - recommended
 * // B = 0,   C = 1/2 - Catmull-Rom spline
 * float MitchellNetravali(float x, float B, float C) {
 *   float ax = fabs(x);
 *   if (ax < 1) {
 *     return ((12 - 9 * B - 6 * C) * ax * ax * ax +
 *             (-18 + 12 * B + 6 * C) * ax * ax + (6 - 2 * B)) / 6;
 *   } else if ((ax >= 1) && (ax < 2)) {
 *     return ((-B - 6 * C) * ax * ax * ax +
 *             (6 * B + 30 * C) * ax * ax + (-12 * B - 48 * C) *
 *             ax + (8 * B + 24 * C)) / 6;
 *   } else {
 *     return 0;
 *   }
 * }
 *
 * // Create a 1D float texture encoding weight for cubic filter
 * GLuint createWeightTexture(int size, float B, float C) {
 *   float *img = new 
 *   float[size * 4];
 *   float *ptr = img;
 *   for(int i = 0; i < size; i++) {
 *     float x = i / (float) (size - 1);
 *     *ptr++ = MitchellNetravali(x + 1, B, C);
 *     *ptr++ = MitchellNetravali(x, B, C);
 *     *ptr++ = MitchellNetravali(1 - x, B, C);
 *     *ptr++ = MitchellNetravali(2 - x, B, C);
 *   }
 *   GLuint texid;
 *   glGenTextures(1, &texid);
 *   GLenum target = GL_TEXTURE_RECTANGLE_NV;
 *   glBindTexture(target, texid);
 *   glTexParameteri(target, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
 *   glTexParameteri(target, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
 *   glTexParameteri(target, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
 *   glTexParameteri(target, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
 *   glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
 *   glTexImage2D(target, 0, GL_FLOAT_RGBA_NV, size, 1, 0,
 *                GL_RGBA, GL_FLOAT, img);
 *   delete [] img;
 *   return texid;
 * }
 */

vec4
cubic_filter(sampler1D kernel,
             float x,
             vec4 c0,
             vec4 c1,
             vec4 c2,
             vec4 c3)
{
    vec4 h = texture1D(kernel, x);
    vec4 r = c0 * h.x; // f(x+1)
    r += c1 * h.y;     // f(x)
    r += c2 * h.z;     // f(1-x)
    r += c3 * h.w;     // f(2-x)
    return r;
}

vec4
texture2D_bicubic (sampler2D texture, sampler1D kernel, vec2 uv, vec2 pixel)
{
    vec2 texel = uv/pixel;
    vec2 f = fract(texel);
    texel = (texel-fract(texel)+vec2(0.001,0.001))*pixel;

    vec4 t0 = cubic_filter(kernel, f.x,
                           texture2D(texture, texel + vec2(-1, -1)*pixel),
                           texture2D(texture, texel + vec2( 0, -1)*pixel),
                           texture2D(texture, texel + vec2( 1, -1)*pixel),
                           texture2D(texture, texel + vec2( 2, -1)*pixel));
    vec4 t1 = cubic_filter(kernel, f.x,
                           texture2D(texture, texel + vec2(-1, 0)*pixel),
                           texture2D(texture, texel + vec2( 0, 0)*pixel),
                           texture2D(texture, texel + vec2( 1, 0)*pixel),
                           texture2D(texture, texel + vec2( 2, 0)*pixel));
    vec4 t2 = cubic_filter(kernel, f.x,
                           texture2D(texture, texel + vec2(-1, 1)*pixel),
                           texture2D(texture, texel + vec2( 0, 1)*pixel),
                           texture2D(texture, texel + vec2( 1, 1)*pixel),
                           texture2D(texture, texel + vec2( 2, 1)*pixel));
    vec4 t3 = cubic_filter(kernel, f.x,
                           texture2D(texture, texel + vec2(-1, 2)*pixel),
                           texture2D(texture, texel + vec2( 0, 2)*pixel),
                           texture2D(texture, texel + vec2( 1, 2)*pixel),
                           texture2D(texture, texel + vec2( 2, 2)*pixel));
    return cubic_filter(kernel, f.y, t0, t1, t2, t3);
}
